"""
Задание 1.

Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.

Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit


def rev_bubble(my_list):
    n = 1
    counter = 0
    while True:
        c = 0
        for i in range(len(my_list) - n):
            if my_list[i] < my_list[i + 1]:
                my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]
                c += 1
                counter += 1
        if c == 0:
            break
    return f'Отсортированный список по убыванию: {my_list}, \n' \
           f'Количество проходов: {counter}'


some_list = [randint(-100, 99) for i in range(200)]

print(f'Случайный список: {some_list}')
print()
print(rev_bubble(some_list))
q = rev_bubble(some_list)
print(timeit('rev_bubble(some_list)', globals=globals(), number=10000))
print()
print(q)
print(timeit('q', globals=globals(), number=10000))

"""
Для того, чтобы сортировка пузырьком не делала сравнений элементов в отсортированном списке, я ввел переменную с.
Цикл по сортировке будет выполняться до тех пор пока с != 0, в противном случае произойдет выход из цикла.

Применив функцию rev_babble к отсортированному списку, получилось 0 проходов по списку и время выполнения скрипта
уменьшилось на 3 порядка.
"""